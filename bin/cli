#!/usr/bin/env node

const pm2 = require('pm2');
const program = require('commander')
const prompt = require('co-prompt')
const co = require('co')
const chalk = require('chalk')
const chokidar = require('chokidar');
const webpack = require("webpack");
const download = require("download-git-repo");
const fs = require('fs');
const rm = require('rimraf');
const config = require('./config');

//检测文件或者文件夹存在 nodeJS
function fsExistsSync(path) {
    try{
        fs.accessSync(path,fs.F_OK);
    }catch(e){
        return false;
    }
    return true;
}
function initFiles(downLoadPath, appName, fileMap) {
    console.log(chalk.white('\n Start generating...'));
    download(downLoadPath, './' + appName, function (err) {
        if (err) {
            console.log(err)
            process.exit()
        }
        console.log(chalk.white('\n download file completed!'));
        rm(appName + '/.git', err => {
            if (err) {
                throw err;
            }
            console.log(chalk.white('\n remove file completed!'));
            try {
                for (let i = 0; i < fileMap.length; i++) {
                    if (fsExistsSync(fileMap[i])) {
                        let text = fs.readFileSync(fileMap[i], 'utf-8');
                        text = text.replace(/\$_appname/g, appName);
                        fs.writeFileSync(fileMap[i], text);
                    }
                }
                console.log(chalk.white('\n replace file completed!'));
                console.log(chalk.green('\n √ Generation completed!'))
                console.log(`\n cd ${appName} && npm install \n`)
                process.exit()
            } catch (e) {
                console.log(e)
                process.exit()
            }
        });
    })
}
function restartApp(app, cb) {
    pm2.connect(function(err) {
        if (err) {
            console.error(err);
            process.exit(2);
        }

        pm2.restart(app, function(err, apps) {
            pm2.disconnect(); // Disconnects from PM2
            if (err) {
                throw err;
                process.exit()
            }
            console.log(chalk.green('\n √ Restart completed!'));
            if (cb && typeof cb === 'function') {
                cb();
            }
            process.exit();
            
        });
    });
}

function copyDir(src, dist) {
    if (!fsExistsSync(dist)) {
        fs.mkdirSync(dist);
    }
    let paths = fs.readdirSync(src);
     
    paths.forEach(function(path) {
        var _src = src + '/' +path;
        var _dist = dist + '/' +path;
        let stat = fs.lstatSync(_src);
        if (stat.isDirectory()) {
            // 当是目录，递归复制
            copyDir(_src, _dist)
        } else {
            fs.writeFileSync(_dist, fs.readFileSync(_src));
        }
    })
}

function moveAppToPro(appName, fileMap) {
    for (let i in fileMap) {
        if (fsExistsSync(i + appName)) {
            if (!fsExistsSync(fileMap[i])) {
                fs.mkdirSync(fileMap[i]);
                copyDir(i + appName, fileMap[i] + appName);
            } else {
                copyDir(i + appName, fileMap[i] + appName);
            }
        }
    }
    rm.sync('./build');
    console.log(chalk.white('\n √ Remove build completed!'));
    console.log(chalk.green('\n √ Deploy completed!'));
}

program
    .version('1.3.0')
program
    .command('init <option>')
    .description('Generate a new app')
    .action((option) => {
        co(function*() {
            let appName = yield prompt(option + ' name: ');
            let fileMap = config[option].fileMap;
            let downloadPath = config[option].downloadPath;
            initFiles(downloadPath, appName, fileMap);
        });
    });

program
    .command('run')
    .description('start the bun')
    .action(() => {
        co(function*() {
            console.log(chalk.white('\n Starting bunko...'))
            pm2.connect(function(err) {
                if (err) {
                    console.error(err);
                    process.exit(2);
                }

                pm2.start(process.cwd() + '/ecosystem.config.js', function(err, apps) {
                    pm2.disconnect(); // Disconnects from PM2
                    if (err) {
                        throw err;
                        process.exit()
                    }
                    console.log(chalk.green('\n √ Starting completed!'))
                    process.exit()
                    
                });
            });
        })
    })

program
    .command('restart <app>')
    .description('restart the bun')
    .action((app) => {
        co(function*() {
            restartApp(app);
        })
    })
program
    .command('stop <app>')
    .description('stop the bun')
    .action((app) => {
        co(function*() {

            pm2.connect(function(err) {
                if (err) {
                    console.error(err);
                    process.exit(2);
                }

                pm2.stop(app, function(err, apps) {
                    pm2.disconnect(); // Disconnects from PM2
                    if (err) {
                        throw err;
                        process.exit()
                    }
                    console.log(chalk.green('\n √ Stoping completed!'))
                    process.exit()
                    
                });
            });
        })
    })
program
    .command('release')
    .description('deploy the app')
    .alias('r')
    .option("-d, --dev", "if development")
    .option("-t, --to [path]", "Which project to deploy")
    .option("-w, --watch", "if watching the app")
    .action((options) => {
        co(function*() {
            let path = options.to
            let dev = options.dev
            let webpackConfig;
            if (dev) {
                userConf = require(process.cwd() + '/config.js')
                webpackConfig = require('./webpack.config-dev.js')(userConf)
            } else {
                userConf = require(process.cwd() + '/config.js')
                webpackConfig = require('./webpack.config.js')(userConf)
            }
            
            console.log(chalk.white('\n Start deploying...'))
            webpack(webpackConfig, (err, stats) => {

                if (err || stats.hasErrors()) {
                    // 在这里处理错误
                    console.log(stats)
                    process.exit()
                }
                console.log(chalk.green('\n √ Complier completed!'));
                
                try {
                    if (path) {
                        // 如果设置to参数，则移动build目录下的文件到指定project
                        let files = fs.readdirSync('./build/server/');
                        let appName = files[0];
                        let fileMap = config.deployConf.fileMap(path);
                        moveAppToPro(appName, fileMap);

                        restartApp(path.replace(/[\.\.\/]*([/s/S]*)\/?/ig, '$1'), () => {
                            if (options.watch) {
                                // 使用chokidar监控app文件变化，自动部署，仅限线下调试使用
                                const watcher = chokidar.watch([process.cwd() + '/server', process.cwd() + '/src', process.cwd() + '/conf', process.cwd() + '/webpack.config.js']);
                                watcher.on('change', (path, stats) => {
                                    if (stats) console.log(chalk.green(`File ${path} changed size to ${stats.size}`));
                                    webpack(webpackConfig, (err, stats) => {
                                        if (err || stats.hasErrors()) {
                                            // 在这里处理错误
                                            console.log(err)
                                            process.exit()
                                        }
                                        console.log(chalk.green('\n √ Complier completed!'));
                                        if (path) {
                                            // 如果设置to参数，则移动build目录下的文件到指定project
                                            moveAppToPro(appName, fileMap);
                                        }
                                        restartApp(path.replace(/[\.\.]*[\s\S]*\/([^\/]+)\/?/ig, '$1'));
                                    });
                                    
                                });
                            }
                        });
                    }
                    
                } catch (e) {
                    console.log(e)
                    process.exit()
                }
                
            });
        })
    })

program.parse(process.argv);